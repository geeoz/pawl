<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2014 Geeoz Software
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <!-- The basics -->
    <groupId>com.geeoz.pawl</groupId>
    <artifactId>pawl</artifactId>
    <version>1.0d12-SNAPSHOT</version>
    <packaging>pom</packaging>

    <dependencyManagement>
        <dependencies>
            <!-- TESTING DEPENDENCIES -->
            <!-- Provides a library of matcher objects (also known as
                 constraints or predicates) allowing 'match' rules to be defined
                 declaratively, to be used in other frameworks. -->
            <dependency>
                <groupId>org.hamcrest</groupId>
                <artifactId>hamcrest-library</artifactId>
                <version>${hamcrest.version}</version>
            </dependency>
            <!-- GreenMail is an open source, intuitive and easy-to-use test
                 suite of email servers for testing purposes. -->
            <dependency>
                <groupId>com.icegreen</groupId>
                <artifactId>greenmail</artifactId>
                <version>${greenmail.version}</version>
            </dependency>
            <!-- jsoup is a Java library for working with real-world HTML. -->
            <dependency>
                <groupId>org.jsoup</groupId>
                <artifactId>jsoup</artifactId>
                <version>${jsoup.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <modules>
        <module>pawl-jbehave</module>
    </modules>

    <properties>
        <main.basedir>${project.basedir}</main.basedir>
        <maven.compiler.source>1.7</maven.compiler.source>
        <maven.compiler.target>1.7</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <proxy.args />
        <maven-surefire-plugin.encoding>-Dfile.encoding=UTF-8</maven-surefire-plugin.encoding>
        <!--<proxy.args>-Dhttp.proxyHost=proxy2.cht -Dhttp.proxyPort=3128 -Dhttps.proxyHost=proxy2.cht -Dhttps.proxyPort=3128</proxy.args>-->
        <hamcrest.version>1.3</hamcrest.version>
        <!-- Maven plugin versions -->
        <maven-clean-plugin.version>2.5</maven-clean-plugin.version>
        <maven-compiler-plugin.version>3.1</maven-compiler-plugin.version>
        <maven-deploy-plugin.version>2.7</maven-deploy-plugin.version>
        <maven-jar-plugin.version>2.4</maven-jar-plugin.version>
        <maven-javadoc-plugin.version>2.9.1</maven-javadoc-plugin.version>
        <maven-install-plugin.version>2.4</maven-install-plugin.version>
        <maven-release-plugin.version>2.4.1</maven-release-plugin.version>
        <maven-resources-plugin.version>2.6</maven-resources-plugin.version>
        <maven-site-plugin.version>3.3</maven-site-plugin.version>
        <maven-source-plugin.version>2.2.1</maven-source-plugin.version>
        <maven-surefire-plugin.version>2.15</maven-surefire-plugin.version>
        <!-- Code quality check maven plugin versions -->
        <maven-checkstyle-plugin.version>2.10</maven-checkstyle-plugin.version>
        <findbugs-maven-plugin.version>2.5.3</findbugs-maven-plugin.version>
        <findbugs-annotations.version>1.0.0</findbugs-annotations.version>
        <maven-jxr-plugin.version>2.3</maven-jxr-plugin.version>
        <maven-pmd-plugin.version>3.0.1</maven-pmd-plugin.version>
        <!-- Functional check maven plugin versions -->
        <maven-failsafe-plugin.version>2.16</maven-failsafe-plugin.version>
        <!-- Distribution sign -->
        <maven-gpg-plugin.version>1.4</maven-gpg-plugin.version>

        <!-- FUNCTIONAL CHECK -->
        <!-- Skip tests flag -->
        <skipTests />
        <!-- JBehave framework versions -->
        <jbehave-core.version>4.0-beta-8</jbehave-core.version>
        <jbehave-web-selenium.version>3.6-beta-2</jbehave-web-selenium.version>
        <selenium-java.version>2.42.2</selenium-java.version>
        <commons-exec.version>1.2</commons-exec.version>
        <!-- Email test server versions -->
        <greenmail.version>1.3.1b</greenmail.version>
        <!-- HTML Parser -->
        <jsoup.version>1.7.3</jsoup.version>
    </properties>

    <parent>
        <groupId>org.sonatype.oss</groupId>
        <artifactId>oss-parent</artifactId>
        <version>7</version>
    </parent>

    <!-- Build settings -->
    <build>
        <plugins>
            <!-- The Source Plugin creates a jar archive of the source files of
                 the current project. The jar file is, by default, created in
                 the project's target directory. -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- The JXR Plugin produces a cross-reference of the
                 project's sources. The generated reports make it easier
                 for the user to reference or find specific lines of
                 code. It is also handy when used with the PMD Plugin
                 for referencing errors found in the code -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jxr-plugin</artifactId>
                <version>${maven-jxr-plugin.version}</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>jxr</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- The Checkstyle Plugin generates a report regarding the
                 code style used by the developers. -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <version>${maven-checkstyle-plugin.version}</version>
                <configuration>
                    <configLocation>${main.basedir}/checkstyle.xml</configLocation>
                    <consoleOutput>true</consoleOutput>
                </configuration>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- The PMD Plugin allows you to automatically run the PMD
                 code analysis tool on your project's source code and
                 generate a site report with its results. It also
                 supports the separate Copy/Paste Detector tool (or CPD)
                 distributed with PMD. -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-pmd-plugin</artifactId>
                <version>${maven-pmd-plugin.version}</version>
                <configuration>
                    <sourceEncoding>${project.build.sourceEncoding}</sourceEncoding>
                    <verbose>true</verbose>
                    <targetJdk>${maven.compiler.target}</targetJdk>
                </configuration>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>check</goal>
                            <goal>cpd-check</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- FindBugs looks for bugs in Java programs. It is based
                 on the concept of bug patterns. A bug pattern is a code
                 idiom that is often an error. -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>findbugs-maven-plugin</artifactId>
                <version>${findbugs-maven-plugin.version}</version>
                <configuration>
                    <threshold>Low</threshold>
                    <effort>Max</effort>
                    <findbugsXmlOutput>true</findbugsXmlOutput>
                    <excludeFilterFile>${main.basedir}/findbugs-exclude.xml</excludeFilterFile>
                </configuration>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- The Failsafe Plugin is designed to run integration
                 tests while the Surefire Plugins is designed to run
                 unit tests. The name (failsafe) was chosen both because
                 it is a synonym of surefire and because it implies that
                 when it fails, it does so in a safe way. -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>${maven-failsafe-plugin.version}</version>
                <configuration>
                    <argLine>${proxy.args}</argLine>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
        <pluginManagement>
            <plugins>
                <!-- The Clean Plugin is used when you want to remove files
                     generated at build-time in a project's directory. -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-clean-plugin</artifactId>
                    <version>${maven-clean-plugin.version}</version>
                </plugin>
                <!-- The Compiler Plugin is used to compile the sources of your
                     project. -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${maven-compiler-plugin.version}</version>
                </plugin>
                <!-- The deploy plugin is primarily used during the deploy
                     phase, to add your artifact(s) to a remote repository for
                     sharing with other developers and projects. -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-deploy-plugin</artifactId>
                    <version>${maven-deploy-plugin.version}</version>
                </plugin>
                <!-- This plugin provides the capability to build and sign
                     jars. -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>${maven-jar-plugin.version}</version>
                </plugin>
                <!-- The Apache Maven Javadoc Plugin is a plugin that uses
                     the javadoc tool for generating javadocs for the
                     specified project. -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-javadoc-plugin</artifactId>
                    <version>${maven-javadoc-plugin.version}</version>
                </plugin>
                <!-- The Install Plugin is used during the install phase to add
                     artifact(s) to the local repository. The Install Plugin
                     uses the information in the POM (groupId, artifactId,
                     version) to determine the proper location for the artifact
                     within the local repository. -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-install-plugin</artifactId>
                    <version>${maven-install-plugin.version}</version>
                </plugin>
                <!-- This plugin is used to release a project with Maven, saving
                     a lot of repetitive, manual work. Releasing a project is
                     made in two steps: prepare and perform. -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-release-plugin</artifactId>
                    <version>${maven-release-plugin.version}</version>
                    <configuration>
                        <tagNameFormat>@{project.version}</tagNameFormat>
                    </configuration>
                </plugin>
                <!-- The Resources Plugin handles the copying of project
                     resources to the output directory. -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>${maven-resources-plugin.version}</version>
                </plugin>
                <!-- The Site Plugin is used to generate a site for the project.
                     The generated site also includes the project's reports that
                     were configured in the POM. -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-site-plugin</artifactId>
                    <version>${maven-site-plugin.version}</version>
                </plugin>
                <!-- The Source Plugin creates a jar archive of the source files
                     of the current project. The jar file is, by default,
                     created in the project's target directory. -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-source-plugin</artifactId>
                    <version>${maven-source-plugin.version}</version>
                </plugin>
                <!-- The Surefire Plugin is used during the test phase of the
                     build lifecycle to execute the unit tests of an
                     application. -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>${maven-surefire-plugin.version}</version>
                    <configuration>
                        <argLine>${maven-surefire-plugin.encoding} ${proxy.args}</argLine>
                    </configuration>
                </plugin>
                <!-- Signs the project artifacts with GnuPG. -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-gpg-plugin</artifactId>
                    <version>${maven-gpg-plugin.version}</version>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>
    <profiles>
        <profile>
            <id>release-sign-artifacts</id>
            <activation>
                <property>
                    <name>performRelease</name>
                    <value>true</value>
                </property>
            </activation>
            <build>
                <plugins>
                    <!-- The Apache Maven Javadoc Plugin is a plugin that uses
                         the javadoc tool for generating javadocs for the
                          specified project. -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-javadoc-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>attach-javadocs</id>
                                <goals>
                                    <goal>jar</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <!-- Signs the project artifacts with GnuPG. -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-gpg-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>sign-artifacts</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>sign</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

    <!-- More project information -->
    <name>PAWL</name>
    <description>A project to aid with test automation.</description>
    <url>https://bitbucket.org/geeoz/pawl</url>

    <licenses>
        <license>
            <name>The Apache Software License, Version 2.0</name>
            <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
            <distribution>repo</distribution>
        </license>
    </licenses>

    <organization>
        <name>Geeoz Software</name>
        <url>http://www.geeoz.com</url>
    </organization>

    <developers>
        <developer>
            <id>alexander.voloshyn</id>
            <name>Alex Voloshyn</name>
            <email>alex.voloshyn@geeoz.com</email>
            <organization>Geeoz Software</organization>
            <organizationUrl>http://www.geeoz.com</organizationUrl>
            <roles>
                <role>Architect</role>
                <role>Developer</role>
            </roles>
            <timezone>+2</timezone>
        </developer>
        <developer>
            <id>mike.dolinin</id>
            <name>Mike Dolinin</name>
            <email>mike.dolinin@geeoz.com</email>
            <organization>Geeoz Software</organization>
            <organizationUrl>http://www.geeoz.com</organizationUrl>
            <roles>
                <role>Developer</role>
            </roles>
            <timezone>+2</timezone>
        </developer>
    </developers>

    <scm>
        <connection>scm:git:ssh://git@bitbucket.org/geeoz/pawl</connection>
        <developerConnection>scm:git:ssh://git@bitbucket.org/geeoz/pawl</developerConnection>
        <url>https://bitbucket.org/geeoz/pawl</url>
        <tag>develop</tag>
    </scm>

    <!-- Describes the prerequisites a project can have. -->
    <prerequisites>
        <maven>3.0.4]</maven>
    </prerequisites>
</project>